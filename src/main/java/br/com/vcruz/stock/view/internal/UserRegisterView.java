package br.com.vcruz.stock.view.internal;

import br.com.vcruz.stock.exception.DuplicateException;
import br.com.vcruz.stock.exception.InternalException;
import br.com.vcruz.stock.exception.LoginException;
import br.com.vcruz.stock.exception.PasswordException;
import br.com.vcruz.stock.model.User;
import br.com.vcruz.stock.service.UserService;
import br.com.vcruz.stock.view.DashboardView;
import java.awt.event.KeyEvent;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author vcruz
 */
public class UserRegisterView extends javax.swing.JInternalFrame {

    private final UserService userService;
    private final boolean isEditing;

    /**
     * Creates new form UserRegisterView
     *
     * @param isEditing
     */
    public UserRegisterView(boolean isEditing) {
        this.isEditing = isEditing;
        this.userService = new UserService();

        initComponents();

        this.resetForm();

        if (this.isEditing) {
            this.setTitle("Editar usuário");
            this.fillUderData(DashboardView.loggedUser);
        }
    }

    private void save() {
        String name = this.nameTextField.getText();
        String login = this.loginTextField.getText();
        String password = String.valueOf(this.passwordPasswordField.getPassword());
        String passwordConfirmation = String.valueOf(this.passwordConfirmationPasswordField.getPassword());
        boolean isRoot = this.rootCheckBox.isSelected();

        try {
            Map<String, String> JOptionPaneData = this.saveWithProperForm(name, login, password, passwordConfirmation, isRoot);

            JOptionPane.showMessageDialog(this, JOptionPaneData.get("message"), JOptionPaneData.get("title"), JOptionPane.INFORMATION_MESSAGE);
        } catch (LoginException | DuplicateException | PasswordException | InternalException e) {
            String error = e.getMessage();

            if (e instanceof InternalException) {
                error = "[Erro interno] - Não foi possível cadastrar o usuário!";
            }

            JOptionPane.showMessageDialog(this, error, "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private Map<String, String> saveWithProperForm(String name, String login, String password, String passwordConfirmation, boolean isRoot) {
        String titleOfJOptionPane = "Cadastro";
        String messageOfJOptionPane = "Usuário cadastrado!";

        if (!this.isEditing) {
            this.userService.save(name, login, password, passwordConfirmation, isRoot);
        } else {
            titleOfJOptionPane = "Edição";
            messageOfJOptionPane = "Usuário editado!";

            DashboardView.loggedUser = saveEditedUser(name, login, password, passwordConfirmation, isRoot);

            this.fillUderData(DashboardView.loggedUser);
        }

        this.resetForm();

        return Map.of("title", titleOfJOptionPane, "message", messageOfJOptionPane);
    }

    private User saveEditedUser(String name, String login, String password, String passwordConfirmation, boolean isRoot) {
        if (this.changePasswordCheckBox.isSelected()) {
            return this.userService.save(DashboardView.loggedUser.getId(), name, login, password, passwordConfirmation, isRoot);
        } else {
            return this.userService.save(DashboardView.loggedUser.getId(), name, login, isRoot);
        }
    }

    private void resetForm() {
        if (!isEditing) {
            this.nameTextField.setText("");
            this.loginTextField.setText("");
            this.passwordPasswordField.setText("");
            this.passwordConfirmationPasswordField.setText("");
            this.rootCheckBox.setSelected(false);
        }

        this.passwordPasswordField.setEnabled(!this.isEditing);
        this.passwordConfirmationPasswordField.setEnabled(!this.isEditing);
        this.changePasswordCheckBox.setVisible(this.isEditing);
        this.changePasswordCheckBox.setSelected(false);
        this.rootCheckBox.setEnabled(!this.isEditing || DashboardView.loggedUser.isRoot());
    }

    private void fillUderData(User user) {
        this.nameTextField.setText(user.getName());
        this.loginTextField.setText(user.getLogin());
        this.passwordPasswordField.setText("");
        this.passwordConfirmationPasswordField.setText("");
        this.rootCheckBox.setSelected(user.isRoot());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userRegisterPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        loginLabel = new javax.swing.JLabel();
        loginTextField = new javax.swing.JTextField();
        rootCheckBox = new javax.swing.JCheckBox();
        passwordLabel = new javax.swing.JLabel();
        passwordPasswordField = new javax.swing.JPasswordField();
        passwordConfirmationLabel = new javax.swing.JLabel();
        passwordConfirmationPasswordField = new javax.swing.JPasswordField();
        changePasswordCheckBox = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();

        setClosable(true);
        setTitle("Criar novo usuário");
        setToolTipText("");

        nameLabel.setText("Nome");

        nameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameTextFieldKeyPressed(evt);
            }
        });

        loginLabel.setText("login");

        loginTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                loginTextFieldKeyPressed(evt);
            }
        });

        rootCheckBox.setText("Administrador");

        passwordLabel.setText("Senha");

        passwordPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordPasswordFieldKeyPressed(evt);
            }
        });

        passwordConfirmationLabel.setText("Confirmar senha");

        passwordConfirmationPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordConfirmationPasswordFieldKeyPressed(evt);
            }
        });

        changePasswordCheckBox.setText("Alterar senha");
        changePasswordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userRegisterPanelLayout = new javax.swing.GroupLayout(userRegisterPanel);
        userRegisterPanel.setLayout(userRegisterPanelLayout);
        userRegisterPanelLayout.setHorizontalGroup(
            userRegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userRegisterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userRegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameTextField)
                    .addComponent(loginTextField)
                    .addComponent(passwordPasswordField)
                    .addComponent(passwordConfirmationPasswordField)
                    .addGroup(userRegisterPanelLayout.createSequentialGroup()
                        .addGroup(userRegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(loginLabel)
                            .addComponent(rootCheckBox)
                            .addComponent(passwordLabel)
                            .addComponent(passwordConfirmationLabel)
                            .addComponent(changePasswordCheckBox))
                        .addGap(0, 677, Short.MAX_VALUE)))
                .addContainerGap())
        );
        userRegisterPanelLayout.setVerticalGroup(
            userRegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userRegisterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel)
                .addGap(18, 18, 18)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loginLabel)
                .addGap(18, 18, 18)
                .addComponent(loginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(passwordLabel)
                .addGap(18, 18, 18)
                .addComponent(passwordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(passwordConfirmationLabel)
                .addGap(18, 18, 18)
                .addComponent(passwordConfirmationPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rootCheckBox)
                .addGap(18, 18, 18)
                .addComponent(changePasswordCheckBox)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        getContentPane().add(userRegisterPanel, java.awt.BorderLayout.CENTER);

        saveButton.setText("Salvar");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        saveButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveButtonKeyPressed(evt);
            }
        });
        getContentPane().add(saveButton, java.awt.BorderLayout.PAGE_END);

        setBounds(0, 0, 800, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.save();
        }
    }//GEN-LAST:event_nameTextFieldKeyPressed

    private void loginTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loginTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.save();
        }
    }//GEN-LAST:event_loginTextFieldKeyPressed

    private void saveButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.save();
        }
    }//GEN-LAST:event_saveButtonKeyPressed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        this.save();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void changePasswordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordCheckBoxActionPerformed
        this.passwordPasswordField.setEnabled(this.changePasswordCheckBox.isSelected());
        this.passwordConfirmationPasswordField.setEnabled(this.changePasswordCheckBox.isSelected());
    }//GEN-LAST:event_changePasswordCheckBoxActionPerformed

    private void passwordConfirmationPasswordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordConfirmationPasswordFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.save();
        }
    }//GEN-LAST:event_passwordConfirmationPasswordFieldKeyPressed

    private void passwordPasswordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordPasswordFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.save();
        }
    }//GEN-LAST:event_passwordPasswordFieldKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox changePasswordCheckBox;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JTextField loginTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel passwordConfirmationLabel;
    private javax.swing.JPasswordField passwordConfirmationPasswordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordPasswordField;
    private javax.swing.JCheckBox rootCheckBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel userRegisterPanel;
    // End of variables declaration//GEN-END:variables
}
